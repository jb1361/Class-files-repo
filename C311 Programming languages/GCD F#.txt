
    let rec GCD x y : int =
        if (y = 0) then x
        else GCD x (y%x)

System.Console.WriteLine(GCD 9 18);;



//count positive numbers in a list recursively
   let rec pos a L =
       match L with
       | h::t when h > 0 -> pos (a + 1) t
       | _::t -> pos a t
       | [] -> a

   let testlist = [1;-1;1;0;3]
   let test = System.Console.WriteLine(pos 0 testlist)




 

   let rec sortL L =
    match L with
    | [] -> []
    | h::t ->
        let l = List.filter ((>) h) t
        let g = List.filter ((<=) h) t
        (sortL l) @[h] @(sortL g)

let testL = [2;3;1]
 let test = System.Console.WriteLine(sortL testL)












   let rec matadd L1 L2  =
    match L1, L2 with
    | [[]],[[]] -> []
    | [],[] -> []
    | h::t, hh::tt -> (h.Head + hh.Head) :: (h.Tail.Head + hh.Tail.Head):: matadd t tt
    
   let list1 = [[1;2]; [3;4]]
   let list2 = [[5;6]; [7;8]]
   let newlist = [matadd list1 list2 ]
   let test = printfn "%A" newlist
   let list3 = [[1;2]; [3;4]; [5;6]]
   let list4 = [[1;2]; [3;4]; [5;6]]
   let newlist2 = [matadd list3 list4]
   let test2 = printfn "%A" newlist2


let add (a,b) (a2,b2) =
    match (a,b),(a2,b2) with
    | (a,b),(a2,b2) -> (a+a2,b+b2)










let sq x = x * x
let rec sqList f L = 
    match L with
    | [] -> []
    | h::t -> f h::sqList f t

let test = sqList sq [1;2;3;4]
let print = printfn "%A" test




let add x y = x + y
let mul x y = x * y

let rec map2 f L1 L2 = 
  match (L1,L2) with
    | ([], []) -> []
    | (h1::t1, h2::t2) -> f h1 h2::map2 f t1 t2;;


 let rec reduce f a L =
  match L with
    | [] -> a
    | h::t -> f h (reduce f a t);;

let ip L1 L2 =
     reduce add 0 (map2 mul L1 L2) 

let test = ip [1;2;3] [1;2;3]
let print = printfn "%A" test



   